/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package medialib;

import java.util.ArrayList;
import java.util.List;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import utils.Parser;
import utils.Writer;

import utils.Models.Admin;
import utils.Models.User;
import utils.Models.Book;
import utils.Models.Category;

/**
 * The main class of the Media Library application.
 */
public class App extends Application {
  private static List<Admin> admins;
  private static List<User> users;
  private static List<Book> books;
  private static List<Category> categories;
  private static User currentUser;

  /**
   * Initializes the application by parsing data from files and setting up initial values.
   */
  public static void initialize() {
    Parser parser = new Parser();

    parser.parse();

    admins = parser.getAdmins();
    users = parser.getUsers();
    books = parser.getBooks();
    categories = parser.getCategories();

    if(users == null) users = new ArrayList<User>();
    if(books == null) books = new ArrayList<Book>();
    if(categories == null) categories = new ArrayList<Category>();

    if(admins == null) {
      admins = new ArrayList<Admin>();
      admins.add(new Admin("admin", "admin"));
      admins.add(new Admin("medialab", "medialab_2024"));
    }
  }

  /**
   * Saves the current state of the application data to files.
   */
  public static void save() {
    Writer.write(admins, users, books, categories);
  }

  /**
   * Returns a greeting message.
   *
   * @return The greeting message.
   */
  public String getGreeting() {
    return "\n\n\nHello World!\n\n\n";
  }

  /**
   * Prints the list of admins to the console.
   */
  public static void printAdmins() {
    System.out.println("-----------------Admins-----------------");
    for (Admin admin : admins) {
      System.out.println(admin.getUsername());
    }
  }

  /**
   * Prints the list of users to the console.
   */
  public static void printUsers() {
    System.out.println("-----------------Users------------------");
    for (User user : users) {
      System.out.println(user.getUsername());
    }
  }

  /**
   * Prints the list of books to the console.
   */
  public static void printBooks() {
    System.out.println("-----------------Books------------------");
    for (Book book : books) {
      System.out.println(book.getTitle());
    }
  }

  /**
   * Prints the list of categories to the console.
   */
  public static void printCategories() {
    System.out.println("---------------Categories----------------");
    for (Category category : categories) {
      System.out.println(category.getTitle());
    }
  }

  /**
   * Prints all the data (admins, users, books, categories) to the console.
   */
  public static void printAll() {
    printAdmins();
    printUsers();
    printBooks();
    printCategories();
  }

  /**
   * Populates the application data with random values.
   */
  public static void randomize() {
    Writer.populate();
  }

  /**
   * The main method of the application.
   *
   * @param args The command line arguments.
   */
  public static void main(String[] args) {
    if(args.length > 0 && args[0].equals("--randomize" )) {
      randomize();
      System.exit(0);
    }

    initialize();
    // printAll();
    System.out.println("\n\nInitialization complete.");

    System.out.println("Launching application...");
    launch(args);

    save();
    System.out.println("Data saved successfully.");
  }

  @Override
  public void start(Stage primaryStage) throws Exception {
    FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/Home.fxml"));
    Parent root = loader.load();

    primaryStage.setTitle("Medialab Library");
    primaryStage.setScene(new Scene(root));
    primaryStage.show();
  }

  /**
   * Retrieves an admin by their username.
   *
   * @param username The username of the admin.
   * @return The admin object if found, or null if not found.
   */
  public static Admin getAdminByUsername(String username) {
    for (Admin admin : admins) {
      if (admin.getUsername().equals(username)) {
        return admin;
      }
    }
    return null; // Admin not found
  }

  /**
   * Retrieves a user by their username.
   *
   * @param username The username of the user.
   * @return The user object if found, or null if not found.
   */
  public static User getUserByUsername(String username) {
    for (User user : users) {
      if (user.getUsername().equals(username)) {
        return user;
      }
    }
    return null; // User not found
  }

  /**
   * Retrieves a user by their email.
   *
   * @param email The email of the user.
   * @return The user object if found, or null if not found.
   */
  public static User getUserByEmail(String email) {
    for (User user : users) {
      if (user.getEmail().equals(email)) {
        return user;
      }
    }
    return null; // User not found
  }

  /**
   * Retrieves a user by their ID.
   *
   * @param id The ID of the user.
   * @return The user object if found, or null if not found.
   */
  public static User getUserById(String id) {
    for (User user : users) {
      if (user.getId().equals(id)) {
        return user;
      }
    }
    return null; // User not found
  }

  /**
   * Sets the current user.
   *
   * @param user The user object to set as the current user.
   */
  public static void setCurrentUser(User user) {
    currentUser = user;
  }

  /**
   * Retrieves the current user.
   *
   * @return The current user object.
   */
  public static User getCurrentUser() {
    return currentUser;
  }

  /**
   * Adds a user to the list of users.
   *
   * @param user The user object to add.
   */
  public static void addUser(User user) {
    users.add(user);
  }

  /**
   * Retrieves the list of books.
   *
   * @return The list of books.
   */
  public static List<Book> getBooks() {
    return books;
  }

  /**
   * Retrieves the list of users.
   *
   * @return The list of users.
   */
  public static List<User> getUsers() {
    return users;
  }

  /**
   * Retrieves a book by its title.
   *
   * @param title The title of the book.
   * @return The book object if found, or null if not found.
   */
  public static Book getBookByTitle(String title) {
    for (Book book : books) {
      if (book.getTitle().equals(title)) {
        return book;
      }
    }
    return null; // Book not found
  }

  /**
   * Retrieves the list of categories.
   *
   * @return The list of categories.
   */
  public static List<Category> getCategories() {
    return categories;
  }

  /**
   * Adds a book to the list of books.
   *
   * @param book The book object to add.
   */
  public static void addBook(Book book) {
    books.add(book);
  }

  /**
   * Removes a book from the list of books.
   *
   * @param book The book object to remove.
   */
  public static void removeBook(Book book) {
    books.remove(book);
  }

  /**
   * Retrieves a category by its title.
   *
   * @param title The title of the category.
   * @return The category object if found, or null if not found.
   */
  public static Category getCategoryByTitle(String title) {
    for (Category category : categories) {
      if (category.getTitle().equals(title)) {
        return category;
      }
    }
    return null; // Category not found
  }

  /**
   * Adds a category to the list of categories.
   *
   * @param category The category object to add.
   */
  public static void addCategory(Category category) {
    categories.add(category);
  }

  /**
   * Removes a category from the list of categories.
   *
   * @param category The category object to remove.
   */
  public static void removeCategory(Category category) {
    categories.remove(category);
  }

  /**
   * Removes a user from the list of users.
   *
   * @param user The user object to remove.
   */
  public static void removeUser(User user) {
    users.remove(user);
  }
}
